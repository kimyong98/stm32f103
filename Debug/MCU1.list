
MCU1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001580  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080016b0  080016b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080016b0  080016b0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080016b0  080016b0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016b0  080016b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016b0  080016b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080016b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000528  20000010  080016c8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  080016c8  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001afa  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000870  00000000  00000000  00021b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  000223a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  000225b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a24  00000000  00000000  00022740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003309  00000000  00000000  00025164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d53  00000000  00000000  0002846d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000321c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000060c  00000000  00000000  00032210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08001698 	.word	0x08001698

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08001698 	.word	0x08001698

08000170 <go>:
#include "def.h"
#include "angle.h"
void servo_init(void);
void pwm(void);
void go(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	int path = 5;
 8000176:	2305      	movs	r3, #5
 8000178:	607b      	str	r3, [r7, #4]
	//4's leg
	duty(TIM4, TIM_CH1, FOUR_TWO + path);
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	b29b      	uxth	r3, r3
 800017e:	3332      	adds	r3, #50	; 0x32
 8000180:	b29b      	uxth	r3, r3
 8000182:	461a      	mov	r2, r3
 8000184:	2100      	movs	r1, #0
 8000186:	4841      	ldr	r0, [pc, #260]	; (800028c <go+0x11c>)
 8000188:	f001 f86c 	bl	8001264 <duty>
	//1's leg
	duty(TIM2, TIM_CH1, ONE_TWO - path);
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	b29b      	uxth	r3, r3
 8000190:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000194:	b29b      	uxth	r3, r3
 8000196:	461a      	mov	r2, r3
 8000198:	2100      	movs	r1, #0
 800019a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800019e:	f001 f861 	bl	8001264 <duty>
	duty(TIM3, TIM_CH3, TWO_TWO);
 80001a2:	225c      	movs	r2, #92	; 0x5c
 80001a4:	2102      	movs	r1, #2
 80001a6:	483a      	ldr	r0, [pc, #232]	; (8000290 <go+0x120>)
 80001a8:	f001 f85c 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO);
 80001ac:	2241      	movs	r2, #65	; 0x41
 80001ae:	2100      	movs	r1, #0
 80001b0:	4837      	ldr	r0, [pc, #220]	; (8000290 <go+0x120>)
 80001b2:	f001 f857 	bl	8001264 <duty>
	systic_delay(200);
 80001b6:	20c8      	movs	r0, #200	; 0xc8
 80001b8:	f001 fa2c 	bl	8001614 <systic_delay>
	//4's leg
	duty(TIM3, TIM_CH2, FOUR_ONE + path);
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	b29b      	uxth	r3, r3
 80001c0:	3355      	adds	r3, #85	; 0x55
 80001c2:	b29b      	uxth	r3, r3
 80001c4:	461a      	mov	r2, r3
 80001c6:	2101      	movs	r1, #1
 80001c8:	4831      	ldr	r0, [pc, #196]	; (8000290 <go+0x120>)
 80001ca:	f001 f84b 	bl	8001264 <duty>
	//1's leg
	duty(TIM4, TIM_CH2, ONE_ONE - path);
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	b29b      	uxth	r3, r3
 80001d2:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	461a      	mov	r2, r3
 80001da:	2101      	movs	r1, #1
 80001dc:	482b      	ldr	r0, [pc, #172]	; (800028c <go+0x11c>)
 80001de:	f001 f841 	bl	8001264 <duty>
	duty(TIM2, TIM_CH2, TWO_ONE);
 80001e2:	2250      	movs	r2, #80	; 0x50
 80001e4:	2101      	movs	r1, #1
 80001e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80001ea:	f001 f83b 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE);
 80001ee:	225f      	movs	r2, #95	; 0x5f
 80001f0:	2103      	movs	r1, #3
 80001f2:	4826      	ldr	r0, [pc, #152]	; (800028c <go+0x11c>)
 80001f4:	f001 f836 	bl	8001264 <duty>
	systic_delay(200);
 80001f8:	20c8      	movs	r0, #200	; 0xc8
 80001fa:	f001 fa0b 	bl	8001614 <systic_delay>



	//2's leg
	duty(TIM3, TIM_CH3, TWO_TWO - path);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	b29b      	uxth	r3, r3
 8000202:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8000206:	b29b      	uxth	r3, r3
 8000208:	461a      	mov	r2, r3
 800020a:	2102      	movs	r1, #2
 800020c:	4820      	ldr	r0, [pc, #128]	; (8000290 <go+0x120>)
 800020e:	f001 f829 	bl	8001264 <duty>
	//3's leg
	duty(TIM3, TIM_CH1, THREE_TWO + path);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	b29b      	uxth	r3, r3
 8000216:	3341      	adds	r3, #65	; 0x41
 8000218:	b29b      	uxth	r3, r3
 800021a:	461a      	mov	r2, r3
 800021c:	2100      	movs	r1, #0
 800021e:	481c      	ldr	r0, [pc, #112]	; (8000290 <go+0x120>)
 8000220:	f001 f820 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO);
 8000224:	2232      	movs	r2, #50	; 0x32
 8000226:	2100      	movs	r1, #0
 8000228:	4818      	ldr	r0, [pc, #96]	; (800028c <go+0x11c>)
 800022a:	f001 f81b 	bl	8001264 <duty>
	duty(TIM2, TIM_CH1, ONE_TWO);
 800022e:	2250      	movs	r2, #80	; 0x50
 8000230:	2100      	movs	r1, #0
 8000232:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000236:	f001 f815 	bl	8001264 <duty>
	systic_delay(200);
 800023a:	20c8      	movs	r0, #200	; 0xc8
 800023c:	f001 f9ea 	bl	8001614 <systic_delay>
	//2's leg
	duty(TIM2, TIM_CH2, TWO_ONE - path);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29b      	uxth	r3, r3
 8000244:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000248:	b29b      	uxth	r3, r3
 800024a:	461a      	mov	r2, r3
 800024c:	2101      	movs	r1, #1
 800024e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000252:	f001 f807 	bl	8001264 <duty>
	//3's leg
	duty(TIM4, TIM_CH4, THREE_ONE + path);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	b29b      	uxth	r3, r3
 800025a:	335f      	adds	r3, #95	; 0x5f
 800025c:	b29b      	uxth	r3, r3
 800025e:	461a      	mov	r2, r3
 8000260:	2103      	movs	r1, #3
 8000262:	480a      	ldr	r0, [pc, #40]	; (800028c <go+0x11c>)
 8000264:	f000 fffe 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, FOUR_ONE);
 8000268:	2255      	movs	r2, #85	; 0x55
 800026a:	2101      	movs	r1, #1
 800026c:	4808      	ldr	r0, [pc, #32]	; (8000290 <go+0x120>)
 800026e:	f000 fff9 	bl	8001264 <duty>
	duty(TIM4, TIM_CH2, ONE_ONE);
 8000272:	224b      	movs	r2, #75	; 0x4b
 8000274:	2101      	movs	r1, #1
 8000276:	4805      	ldr	r0, [pc, #20]	; (800028c <go+0x11c>)
 8000278:	f000 fff4 	bl	8001264 <duty>
	systic_delay(200);
 800027c:	20c8      	movs	r0, #200	; 0xc8
 800027e:	f001 f9c9 	bl	8001614 <systic_delay>

}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40000800 	.word	0x40000800
 8000290:	40000400 	.word	0x40000400

08000294 <down>:
void down(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	int path = 17;
 800029a:	2311      	movs	r3, #17
 800029c:	607b      	str	r3, [r7, #4]
	//down
	//1's leg
	duty(TIM4, TIM_CH2, ONE_ONE + path);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	334b      	adds	r3, #75	; 0x4b
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	461a      	mov	r2, r3
 80002a8:	2101      	movs	r1, #1
 80002aa:	4838      	ldr	r0, [pc, #224]	; (800038c <down+0xf8>)
 80002ac:	f000 ffda 	bl	8001264 <duty>
	duty(TIM2, TIM_CH1, ONE_TWO - path);
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	b29b      	uxth	r3, r3
 80002b4:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	2100      	movs	r1, #0
 80002be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002c2:	f000 ffcf 	bl	8001264 <duty>
	//2's leg
	duty(TIM2, TIM_CH2, TWO_ONE + 20);
 80002c6:	2264      	movs	r2, #100	; 0x64
 80002c8:	2101      	movs	r1, #1
 80002ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002ce:	f000 ffc9 	bl	8001264 <duty>
	duty(TIM3, TIM_CH3, TWO_TWO - 20);
 80002d2:	2248      	movs	r2, #72	; 0x48
 80002d4:	2102      	movs	r1, #2
 80002d6:	482e      	ldr	r0, [pc, #184]	; (8000390 <down+0xfc>)
 80002d8:	f000 ffc4 	bl	8001264 <duty>
	//3's leg
	duty(TIM4, TIM_CH4, THREE_ONE - path);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	b29b      	uxth	r3, r3
 80002e0:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	2103      	movs	r1, #3
 80002ea:	4828      	ldr	r0, [pc, #160]	; (800038c <down+0xf8>)
 80002ec:	f000 ffba 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO + path);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	3341      	adds	r3, #65	; 0x41
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	461a      	mov	r2, r3
 80002fa:	2100      	movs	r1, #0
 80002fc:	4824      	ldr	r0, [pc, #144]	; (8000390 <down+0xfc>)
 80002fe:	f000 ffb1 	bl	8001264 <duty>
	//4's leg
	duty(TIM3, TIM_CH2, FOUR_ONE - 20);
 8000302:	2241      	movs	r2, #65	; 0x41
 8000304:	2101      	movs	r1, #1
 8000306:	4822      	ldr	r0, [pc, #136]	; (8000390 <down+0xfc>)
 8000308:	f000 ffac 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO + 20);
 800030c:	2246      	movs	r2, #70	; 0x46
 800030e:	2100      	movs	r1, #0
 8000310:	481e      	ldr	r0, [pc, #120]	; (800038c <down+0xf8>)
 8000312:	f000 ffa7 	bl	8001264 <duty>
	systic_delay(3000);
 8000316:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800031a:	f001 f97b 	bl	8001614 <systic_delay>


	//2's leg

	duty(TIM3, TIM_CH3, TWO_TWO);
 800031e:	225c      	movs	r2, #92	; 0x5c
 8000320:	2102      	movs	r1, #2
 8000322:	481b      	ldr	r0, [pc, #108]	; (8000390 <down+0xfc>)
 8000324:	f000 ff9e 	bl	8001264 <duty>
	//4's leg

	duty(TIM4, TIM_CH1, FOUR_TWO);
 8000328:	2232      	movs	r2, #50	; 0x32
 800032a:	2100      	movs	r1, #0
 800032c:	4817      	ldr	r0, [pc, #92]	; (800038c <down+0xf8>)
 800032e:	f000 ff99 	bl	8001264 <duty>
	systic_delay(1000);
 8000332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000336:	f001 f96d 	bl	8001614 <systic_delay>

	//1's leg
	duty(TIM4, TIM_CH2, ONE_ONE);
 800033a:	224b      	movs	r2, #75	; 0x4b
 800033c:	2101      	movs	r1, #1
 800033e:	4813      	ldr	r0, [pc, #76]	; (800038c <down+0xf8>)
 8000340:	f000 ff90 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE);
 8000344:	225f      	movs	r2, #95	; 0x5f
 8000346:	2103      	movs	r1, #3
 8000348:	4810      	ldr	r0, [pc, #64]	; (800038c <down+0xf8>)
 800034a:	f000 ff8b 	bl	8001264 <duty>

	//2's leg
	duty(TIM2, TIM_CH2, TWO_ONE);
 800034e:	2250      	movs	r2, #80	; 0x50
 8000350:	2101      	movs	r1, #1
 8000352:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000356:	f000 ff85 	bl	8001264 <duty>
	//4's leg
	duty(TIM3, TIM_CH2, FOUR_ONE);
 800035a:	2255      	movs	r2, #85	; 0x55
 800035c:	2101      	movs	r1, #1
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <down+0xfc>)
 8000360:	f000 ff80 	bl	8001264 <duty>

	duty(TIM2, TIM_CH1, ONE_TWO);
 8000364:	2250      	movs	r2, #80	; 0x50
 8000366:	2100      	movs	r1, #0
 8000368:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800036c:	f000 ff7a 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO);
 8000370:	2241      	movs	r2, #65	; 0x41
 8000372:	2100      	movs	r1, #0
 8000374:	4806      	ldr	r0, [pc, #24]	; (8000390 <down+0xfc>)
 8000376:	f000 ff75 	bl	8001264 <duty>
	systic_delay(2000);
 800037a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800037e:	f001 f949 	bl	8001614 <systic_delay>
}
 8000382:	bf00      	nop
 8000384:	3708      	adds	r7, #8
 8000386:	46bd      	mov	sp, r7
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	40000800 	.word	0x40000800
 8000390:	40000400 	.word	0x40000400

08000394 <left>:

void left(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	int path = 5;
 800039a:	2305      	movs	r3, #5
 800039c:	607b      	str	r3, [r7, #4]
	duty(TIM3, TIM_CH3, TWO_TWO);
 800039e:	225c      	movs	r2, #92	; 0x5c
 80003a0:	2102      	movs	r1, #2
 80003a2:	4842      	ldr	r0, [pc, #264]	; (80004ac <left+0x118>)
 80003a4:	f000 ff5e 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO);
 80003a8:	2241      	movs	r2, #65	; 0x41
 80003aa:	2100      	movs	r1, #0
 80003ac:	483f      	ldr	r0, [pc, #252]	; (80004ac <left+0x118>)
 80003ae:	f000 ff59 	bl	8001264 <duty>
	duty(TIM2, TIM_CH1, ONE_TWO-path);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80003ba:	b29b      	uxth	r3, r3
 80003bc:	461a      	mov	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003c4:	f000 ff4e 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO+path);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	b29b      	uxth	r3, r3
 80003cc:	3332      	adds	r3, #50	; 0x32
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	2100      	movs	r1, #0
 80003d4:	4836      	ldr	r0, [pc, #216]	; (80004b0 <left+0x11c>)
 80003d6:	f000 ff45 	bl	8001264 <duty>
	systic_delay(200);
 80003da:	20c8      	movs	r0, #200	; 0xc8
 80003dc:	f001 f91a 	bl	8001614 <systic_delay>
	duty(TIM2, TIM_CH2, TWO_ONE);
 80003e0:	2250      	movs	r2, #80	; 0x50
 80003e2:	2101      	movs	r1, #1
 80003e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003e8:	f000 ff3c 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE);
 80003ec:	225f      	movs	r2, #95	; 0x5f
 80003ee:	2103      	movs	r1, #3
 80003f0:	482f      	ldr	r0, [pc, #188]	; (80004b0 <left+0x11c>)
 80003f2:	f000 ff37 	bl	8001264 <duty>
	duty(TIM4, TIM_CH2, ONE_ONE+path);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	b29b      	uxth	r3, r3
 80003fa:	334b      	adds	r3, #75	; 0x4b
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	2101      	movs	r1, #1
 8000402:	482b      	ldr	r0, [pc, #172]	; (80004b0 <left+0x11c>)
 8000404:	f000 ff2e 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, FOUR_ONE+path);
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	b29b      	uxth	r3, r3
 800040c:	3355      	adds	r3, #85	; 0x55
 800040e:	b29b      	uxth	r3, r3
 8000410:	461a      	mov	r2, r3
 8000412:	2101      	movs	r1, #1
 8000414:	4825      	ldr	r0, [pc, #148]	; (80004ac <left+0x118>)
 8000416:	f000 ff25 	bl	8001264 <duty>
	systic_delay(200);
 800041a:	20c8      	movs	r0, #200	; 0xc8
 800041c:	f001 f8fa 	bl	8001614 <systic_delay>
	duty(TIM2, TIM_CH1, ONE_TWO);
 8000420:	2250      	movs	r2, #80	; 0x50
 8000422:	2100      	movs	r1, #0
 8000424:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000428:	f000 ff1c 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO);
 800042c:	2232      	movs	r2, #50	; 0x32
 800042e:	2100      	movs	r1, #0
 8000430:	481f      	ldr	r0, [pc, #124]	; (80004b0 <left+0x11c>)
 8000432:	f000 ff17 	bl	8001264 <duty>
	duty(TIM3, TIM_CH3, TWO_TWO-path);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	b29b      	uxth	r3, r3
 800043a:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 800043e:	b29b      	uxth	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2102      	movs	r1, #2
 8000444:	4819      	ldr	r0, [pc, #100]	; (80004ac <left+0x118>)
 8000446:	f000 ff0d 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO+path);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	b29b      	uxth	r3, r3
 800044e:	3341      	adds	r3, #65	; 0x41
 8000450:	b29b      	uxth	r3, r3
 8000452:	461a      	mov	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	4815      	ldr	r0, [pc, #84]	; (80004ac <left+0x118>)
 8000458:	f000 ff04 	bl	8001264 <duty>
	systic_delay(200);
 800045c:	20c8      	movs	r0, #200	; 0xc8
 800045e:	f001 f8d9 	bl	8001614 <systic_delay>
	duty(TIM4, TIM_CH2, ONE_ONE);
 8000462:	224b      	movs	r2, #75	; 0x4b
 8000464:	2101      	movs	r1, #1
 8000466:	4812      	ldr	r0, [pc, #72]	; (80004b0 <left+0x11c>)
 8000468:	f000 fefc 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, FOUR_ONE);
 800046c:	2255      	movs	r2, #85	; 0x55
 800046e:	2101      	movs	r1, #1
 8000470:	480e      	ldr	r0, [pc, #56]	; (80004ac <left+0x118>)
 8000472:	f000 fef7 	bl	8001264 <duty>
	duty(TIM2, TIM_CH2, TWO_ONE+path);
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	b29b      	uxth	r3, r3
 800047a:	3350      	adds	r3, #80	; 0x50
 800047c:	b29b      	uxth	r3, r3
 800047e:	461a      	mov	r2, r3
 8000480:	2101      	movs	r1, #1
 8000482:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000486:	f000 feed 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE+path);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	b29b      	uxth	r3, r3
 800048e:	335f      	adds	r3, #95	; 0x5f
 8000490:	b29b      	uxth	r3, r3
 8000492:	461a      	mov	r2, r3
 8000494:	2103      	movs	r1, #3
 8000496:	4806      	ldr	r0, [pc, #24]	; (80004b0 <left+0x11c>)
 8000498:	f000 fee4 	bl	8001264 <duty>
	systic_delay(200);
 800049c:	20c8      	movs	r0, #200	; 0xc8
 800049e:	f001 f8b9 	bl	8001614 <systic_delay>

}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40000400 	.word	0x40000400
 80004b0:	40000800 	.word	0x40000800

080004b4 <right>:

void right(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
	int path = 7;
 80004ba:	2307      	movs	r3, #7
 80004bc:	607b      	str	r3, [r7, #4]
	duty(TIM3, TIM_CH3, TWO_TWO);
 80004be:	225c      	movs	r2, #92	; 0x5c
 80004c0:	2102      	movs	r1, #2
 80004c2:	4844      	ldr	r0, [pc, #272]	; (80005d4 <right+0x120>)
 80004c4:	f000 fece 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO);
 80004c8:	2241      	movs	r2, #65	; 0x41
 80004ca:	2100      	movs	r1, #0
 80004cc:	4841      	ldr	r0, [pc, #260]	; (80005d4 <right+0x120>)
 80004ce:	f000 fec9 	bl	8001264 <duty>
	duty(TIM2, TIM_CH1, ONE_TWO-path);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80004da:	b29b      	uxth	r3, r3
 80004dc:	461a      	mov	r2, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80004e4:	f000 febe 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO+path);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3332      	adds	r3, #50	; 0x32
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	4838      	ldr	r0, [pc, #224]	; (80005d8 <right+0x124>)
 80004f6:	f000 feb5 	bl	8001264 <duty>
	systic_delay(200);
 80004fa:	20c8      	movs	r0, #200	; 0xc8
 80004fc:	f001 f88a 	bl	8001614 <systic_delay>
	duty(TIM2, TIM_CH2, TWO_ONE);
 8000500:	2250      	movs	r2, #80	; 0x50
 8000502:	2101      	movs	r1, #1
 8000504:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000508:	f000 feac 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE);
 800050c:	225f      	movs	r2, #95	; 0x5f
 800050e:	2103      	movs	r1, #3
 8000510:	4831      	ldr	r0, [pc, #196]	; (80005d8 <right+0x124>)
 8000512:	f000 fea7 	bl	8001264 <duty>
	duty(TIM4, TIM_CH2, ONE_ONE-path);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	b29b      	uxth	r3, r3
 800051a:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 800051e:	b29b      	uxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	2101      	movs	r1, #1
 8000524:	482c      	ldr	r0, [pc, #176]	; (80005d8 <right+0x124>)
 8000526:	f000 fe9d 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, FOUR_ONE-path);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	b29b      	uxth	r3, r3
 800052e:	f1c3 0355 	rsb	r3, r3, #85	; 0x55
 8000532:	b29b      	uxth	r3, r3
 8000534:	461a      	mov	r2, r3
 8000536:	2101      	movs	r1, #1
 8000538:	4826      	ldr	r0, [pc, #152]	; (80005d4 <right+0x120>)
 800053a:	f000 fe93 	bl	8001264 <duty>
	systic_delay(200);
 800053e:	20c8      	movs	r0, #200	; 0xc8
 8000540:	f001 f868 	bl	8001614 <systic_delay>
	duty(TIM2, TIM_CH1, ONE_TWO);
 8000544:	2250      	movs	r2, #80	; 0x50
 8000546:	2100      	movs	r1, #0
 8000548:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800054c:	f000 fe8a 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, FOUR_TWO);
 8000550:	2232      	movs	r2, #50	; 0x32
 8000552:	2100      	movs	r1, #0
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <right+0x124>)
 8000556:	f000 fe85 	bl	8001264 <duty>
	duty(TIM3, TIM_CH3, TWO_TWO-path);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	b29b      	uxth	r3, r3
 800055e:	f1c3 035c 	rsb	r3, r3, #92	; 0x5c
 8000562:	b29b      	uxth	r3, r3
 8000564:	461a      	mov	r2, r3
 8000566:	2102      	movs	r1, #2
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <right+0x120>)
 800056a:	f000 fe7b 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, THREE_TWO+path);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	b29b      	uxth	r3, r3
 8000572:	3341      	adds	r3, #65	; 0x41
 8000574:	b29b      	uxth	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	4816      	ldr	r0, [pc, #88]	; (80005d4 <right+0x120>)
 800057c:	f000 fe72 	bl	8001264 <duty>
	systic_delay(200);
 8000580:	20c8      	movs	r0, #200	; 0xc8
 8000582:	f001 f847 	bl	8001614 <systic_delay>
	duty(TIM4, TIM_CH2, ONE_ONE);
 8000586:	224b      	movs	r2, #75	; 0x4b
 8000588:	2101      	movs	r1, #1
 800058a:	4813      	ldr	r0, [pc, #76]	; (80005d8 <right+0x124>)
 800058c:	f000 fe6a 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, FOUR_ONE);
 8000590:	2255      	movs	r2, #85	; 0x55
 8000592:	2101      	movs	r1, #1
 8000594:	480f      	ldr	r0, [pc, #60]	; (80005d4 <right+0x120>)
 8000596:	f000 fe65 	bl	8001264 <duty>
	duty(TIM2, TIM_CH2, TWO_ONE-path);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	b29b      	uxth	r3, r3
 800059e:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	2101      	movs	r1, #1
 80005a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005ac:	f000 fe5a 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, THREE_ONE-path);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	f1c3 035f 	rsb	r3, r3, #95	; 0x5f
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	2103      	movs	r1, #3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <right+0x124>)
 80005c0:	f000 fe50 	bl	8001264 <duty>
	systic_delay(200);
 80005c4:	20c8      	movs	r0, #200	; 0xc8
 80005c6:	f001 f825 	bl	8001614 <systic_delay>

}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40000400 	.word	0x40000400
 80005d8:	40000800 	.word	0x40000800

080005dc <main>:
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

	RCC_handle_t rcc;
	rcc.RCCptr = RCC;
 80005e2:	4b66      	ldr	r3, [pc, #408]	; (800077c <main+0x1a0>)
 80005e4:	60bb      	str	r3, [r7, #8]
	rcc.config.MHZ = RCC_SYSCLK_16MH;
 80005e6:	2302      	movs	r3, #2
 80005e8:	733b      	strb	r3, [r7, #12]
	rcc.config.APB1_DIV = RCC_APB1_DIV_NONE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	737b      	strb	r3, [r7, #13]
	rcc.config.APB2_DIV = RCC_APB2_DIV_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73bb      	strb	r3, [r7, #14]
	configure_sysclk(&rcc);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fd32 	bl	8001060 <configure_sysclk>
	//config systick timer
	init_systick_timer(1000);
 80005fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000600:	f000 ff20 	bl	8001444 <init_systick_timer>

	GPIO_handle_t LED;


	//tx
	LED.GPIOx = GPIOA;
 8000604:	4b5e      	ldr	r3, [pc, #376]	; (8000780 <main+0x1a4>)
 8000606:	603b      	str	r3, [r7, #0]
	LED.config.MODE = AFIO_MODE_OP_PP;
 8000608:	2306      	movs	r3, #6
 800060a:	717b      	strb	r3, [r7, #5]
	LED.config.PIN_NO = GPIO_PIN_NO9;
 800060c:	2309      	movs	r3, #9
 800060e:	713b      	strb	r3, [r7, #4]
	LED.config.SPEED = GPIO_SPEED_10MH;
 8000610:	2301      	movs	r3, #1
 8000612:	71bb      	strb	r3, [r7, #6]

	gpio_clock_ctl(GPIOA);
 8000614:	485a      	ldr	r0, [pc, #360]	; (8000780 <main+0x1a4>)
 8000616:	f000 f9db 	bl	80009d0 <gpio_clock_ctl>
	AFIO_PERIPHERAL_CLK_EN();
 800061a:	4b58      	ldr	r3, [pc, #352]	; (800077c <main+0x1a0>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a57      	ldr	r2, [pc, #348]	; (800077c <main+0x1a0>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6193      	str	r3, [r2, #24]
	gpio_init(&LED);
 8000626:	463b      	mov	r3, r7
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fa1d 	bl	8000a68 <gpio_init>

	//rx
	LED.config.MODE = GPIO_MODE_IP_FL;
 800062e:	2301      	movs	r3, #1
 8000630:	717b      	strb	r3, [r7, #5]
	LED.config.PIN_NO = GPIO_PIN_NO10;
 8000632:	230a      	movs	r3, #10
 8000634:	713b      	strb	r3, [r7, #4]
	gpio_init(&LED);
 8000636:	463b      	mov	r3, r7
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa15 	bl	8000a68 <gpio_init>
	servo_init();
 800063e:	f000 f8a7 	bl	8000790 <servo_init>
	pwm();
 8000642:	f000 f8fb 	bl	800083c <pwm>

	usart_init(USART1);
 8000646:	484f      	ldr	r0, [pc, #316]	; (8000784 <main+0x1a8>)
 8000648:	f000 fe46 	bl	80012d8 <usart_init>
	uint8_t data;

	while(1)
	{
		//standup		//1's leg
		duty(TIM4, TIM_CH2, ONE_ONE);
 800064c:	224b      	movs	r2, #75	; 0x4b
 800064e:	2101      	movs	r1, #1
 8000650:	484d      	ldr	r0, [pc, #308]	; (8000788 <main+0x1ac>)
 8000652:	f000 fe07 	bl	8001264 <duty>
		duty(TIM2, TIM_CH1, ONE_TWO);
 8000656:	2250      	movs	r2, #80	; 0x50
 8000658:	2100      	movs	r1, #0
 800065a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800065e:	f000 fe01 	bl	8001264 <duty>
		//3's leg
		duty(TIM4, TIM_CH4, THREE_ONE);
 8000662:	225f      	movs	r2, #95	; 0x5f
 8000664:	2103      	movs	r1, #3
 8000666:	4848      	ldr	r0, [pc, #288]	; (8000788 <main+0x1ac>)
 8000668:	f000 fdfc 	bl	8001264 <duty>
		duty(TIM3, TIM_CH1, THREE_TWO);
 800066c:	2241      	movs	r2, #65	; 0x41
 800066e:	2100      	movs	r1, #0
 8000670:	4846      	ldr	r0, [pc, #280]	; (800078c <main+0x1b0>)
 8000672:	f000 fdf7 	bl	8001264 <duty>
		//2's leg
		duty(TIM2, TIM_CH2, TWO_ONE);
 8000676:	2250      	movs	r2, #80	; 0x50
 8000678:	2101      	movs	r1, #1
 800067a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800067e:	f000 fdf1 	bl	8001264 <duty>
		duty(TIM3, TIM_CH3, TWO_TWO);
 8000682:	225c      	movs	r2, #92	; 0x5c
 8000684:	2102      	movs	r1, #2
 8000686:	4841      	ldr	r0, [pc, #260]	; (800078c <main+0x1b0>)
 8000688:	f000 fdec 	bl	8001264 <duty>
		//4's leg
		duty(TIM3, TIM_CH2, FOUR_ONE);
 800068c:	2255      	movs	r2, #85	; 0x55
 800068e:	2101      	movs	r1, #1
 8000690:	483e      	ldr	r0, [pc, #248]	; (800078c <main+0x1b0>)
 8000692:	f000 fde7 	bl	8001264 <duty>
		duty(TIM4, TIM_CH1, FOUR_TWO);
 8000696:	2232      	movs	r2, #50	; 0x32
 8000698:	2100      	movs	r1, #0
 800069a:	483b      	ldr	r0, [pc, #236]	; (8000788 <main+0x1ac>)
 800069c:	f000 fde2 	bl	8001264 <duty>
		systic_delay(1000);
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f000 ffb6 	bl	8001614 <systic_delay>
		data = usart_getc(USART1);
 80006a8:	4836      	ldr	r0, [pc, #216]	; (8000784 <main+0x1a8>)
 80006aa:	f000 fe77 	bl	800139c <usart_getc>
 80006ae:	4603      	mov	r3, r0
 80006b0:	74fb      	strb	r3, [r7, #19]

		if(data == 'a'){
 80006b2:	7cfb      	ldrb	r3, [r7, #19]
 80006b4:	2b61      	cmp	r3, #97	; 0x61
 80006b6:	d102      	bne.n	80006be <main+0xe2>
			down();
 80006b8:	f7ff fdec 	bl	8000294 <down>
 80006bc:	e7c6      	b.n	800064c <main+0x70>
		}
		else if(data == 'b')
 80006be:	7cfb      	ldrb	r3, [r7, #19]
 80006c0:	2b62      	cmp	r3, #98	; 0x62
 80006c2:	d10f      	bne.n	80006e4 <main+0x108>
		{
			for(int i=0; i<10; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
 80006c8:	e004      	b.n	80006d4 <main+0xf8>
				go();
 80006ca:	f7ff fd51 	bl	8000170 <go>
			for(int i=0; i<10; i++)
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3301      	adds	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	2b09      	cmp	r3, #9
 80006d8:	ddf7      	ble.n	80006ca <main+0xee>
			systic_delay(2000);
 80006da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006de:	f000 ff99 	bl	8001614 <systic_delay>
 80006e2:	e7b3      	b.n	800064c <main+0x70>
		}
		else if(data == 'c')
 80006e4:	7cfb      	ldrb	r3, [r7, #19]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	d10b      	bne.n	8000702 <main+0x126>
		{
			for(int i=0; i<10; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	e004      	b.n	80006fa <main+0x11e>
				left();
 80006f0:	f7ff fe50 	bl	8000394 <left>
			for(int i=0; i<10; i++)
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	3301      	adds	r3, #1
 80006f8:	61bb      	str	r3, [r7, #24]
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	2b09      	cmp	r3, #9
 80006fe:	ddf7      	ble.n	80006f0 <main+0x114>
 8000700:	e7a4      	b.n	800064c <main+0x70>
		}
		else if(data == 'd')
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b64      	cmp	r3, #100	; 0x64
 8000706:	d1a1      	bne.n	800064c <main+0x70>
		{
			for(int i=0; i<10; i++)
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e004      	b.n	8000718 <main+0x13c>
				right();
 800070e:	f7ff fed1 	bl	80004b4 <right>
			for(int i=0; i<10; i++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	2b09      	cmp	r3, #9
 800071c:	ddf7      	ble.n	800070e <main+0x132>
			duty(TIM4, TIM_CH2, ONE_ONE);
 800071e:	224b      	movs	r2, #75	; 0x4b
 8000720:	2101      	movs	r1, #1
 8000722:	4819      	ldr	r0, [pc, #100]	; (8000788 <main+0x1ac>)
 8000724:	f000 fd9e 	bl	8001264 <duty>
			duty(TIM2, TIM_CH1, ONE_TWO);
 8000728:	2250      	movs	r2, #80	; 0x50
 800072a:	2100      	movs	r1, #0
 800072c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000730:	f000 fd98 	bl	8001264 <duty>
			//3's leg
			duty(TIM4, TIM_CH4, THREE_ONE);
 8000734:	225f      	movs	r2, #95	; 0x5f
 8000736:	2103      	movs	r1, #3
 8000738:	4813      	ldr	r0, [pc, #76]	; (8000788 <main+0x1ac>)
 800073a:	f000 fd93 	bl	8001264 <duty>
			duty(TIM3, TIM_CH1, THREE_TWO);
 800073e:	2241      	movs	r2, #65	; 0x41
 8000740:	2100      	movs	r1, #0
 8000742:	4812      	ldr	r0, [pc, #72]	; (800078c <main+0x1b0>)
 8000744:	f000 fd8e 	bl	8001264 <duty>
			//2's leg
			duty(TIM2, TIM_CH2, TWO_ONE);
 8000748:	2250      	movs	r2, #80	; 0x50
 800074a:	2101      	movs	r1, #1
 800074c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000750:	f000 fd88 	bl	8001264 <duty>
			duty(TIM3, TIM_CH3, TWO_TWO);
 8000754:	225c      	movs	r2, #92	; 0x5c
 8000756:	2102      	movs	r1, #2
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <main+0x1b0>)
 800075a:	f000 fd83 	bl	8001264 <duty>
			//4's leg
			duty(TIM3, TIM_CH2, FOUR_ONE);
 800075e:	2255      	movs	r2, #85	; 0x55
 8000760:	2101      	movs	r1, #1
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <main+0x1b0>)
 8000764:	f000 fd7e 	bl	8001264 <duty>
			duty(TIM4, TIM_CH1, FOUR_TWO);
 8000768:	2232      	movs	r2, #50	; 0x32
 800076a:	2100      	movs	r1, #0
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <main+0x1ac>)
 800076e:	f000 fd79 	bl	8001264 <duty>
			systic_delay(2000);
 8000772:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000776:	f000 ff4d 	bl	8001614 <systic_delay>
		duty(TIM4, TIM_CH2, ONE_ONE);
 800077a:	e767      	b.n	800064c <main+0x70>
 800077c:	40021000 	.word	0x40021000
 8000780:	40010800 	.word	0x40010800
 8000784:	40013800 	.word	0x40013800
 8000788:	40000800 	.word	0x40000800
 800078c:	40000400 	.word	0x40000400

08000790 <servo_init>:
	}

}

void servo_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
	GPIO_handle_t PWM;

	PWM.config.MODE = AFIO_MODE_OP_PP;
 8000796:	2306      	movs	r3, #6
 8000798:	717b      	strb	r3, [r7, #5]
	PWM.config.SPEED = GPIO_SPEED_10MH;
 800079a:	2301      	movs	r3, #1
 800079c:	71bb      	strb	r3, [r7, #6]
	gpio_clock_ctl(GPIOA);
 800079e:	4825      	ldr	r0, [pc, #148]	; (8000834 <servo_init+0xa4>)
 80007a0:	f000 f916 	bl	80009d0 <gpio_clock_ctl>
	gpio_clock_ctl(GPIOB);
 80007a4:	4824      	ldr	r0, [pc, #144]	; (8000838 <servo_init+0xa8>)
 80007a6:	f000 f913 	bl	80009d0 <gpio_clock_ctl>

	PWM.GPIOx = GPIOA;
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <servo_init+0xa4>)
 80007ac:	603b      	str	r3, [r7, #0]

	PWM.config.PIN_NO = GPIO_PIN_NO0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007b2:	463b      	mov	r3, r7
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f957 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO1;
 80007ba:	2301      	movs	r3, #1
 80007bc:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007be:	463b      	mov	r3, r7
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f951 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO6;
 80007c6:	2306      	movs	r3, #6
 80007c8:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007ca:	463b      	mov	r3, r7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f94b 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO7;
 80007d2:	2307      	movs	r3, #7
 80007d4:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007d6:	463b      	mov	r3, r7
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f945 	bl	8000a68 <gpio_init>

	PWM.GPIOx = GPIOB;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <servo_init+0xa8>)
 80007e0:	603b      	str	r3, [r7, #0]

	PWM.config.PIN_NO = GPIO_PIN_NO0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007e6:	463b      	mov	r3, r7
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f93d 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007f2:	463b      	mov	r3, r7
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f937 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO6;
 80007fa:	2306      	movs	r3, #6
 80007fc:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 80007fe:	463b      	mov	r3, r7
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f931 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO7;
 8000806:	2307      	movs	r3, #7
 8000808:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 800080a:	463b      	mov	r3, r7
 800080c:	4618      	mov	r0, r3
 800080e:	f000 f92b 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO8;
 8000812:	2308      	movs	r3, #8
 8000814:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f925 	bl	8000a68 <gpio_init>
	PWM.config.PIN_NO = GPIO_PIN_NO9;
 800081e:	2309      	movs	r3, #9
 8000820:	713b      	strb	r3, [r7, #4]
	gpio_init(&PWM);
 8000822:	463b      	mov	r3, r7
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f91f 	bl	8000a68 <gpio_init>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40010800 	.word	0x40010800
 8000838:	40010c00 	.word	0x40010c00

0800083c <pwm>:

void pwm(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	TIM_handle_t timer;
	timer.config.ARR = 1000;
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	80fb      	strh	r3, [r7, #6]
	timer.config.PSC = 320;
 8000848:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800084c:	80bb      	strh	r3, [r7, #4]

	TIM2_PERIPHERAL_CLK_EN();
 800084e:	4b48      	ldr	r3, [pc, #288]	; (8000970 <pwm+0x134>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	4a47      	ldr	r2, [pc, #284]	; (8000970 <pwm+0x134>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	61d3      	str	r3, [r2, #28]
	TIM3_PERIPHERAL_CLK_EN();
 800085a:	4b45      	ldr	r3, [pc, #276]	; (8000970 <pwm+0x134>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a44      	ldr	r2, [pc, #272]	; (8000970 <pwm+0x134>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	61d3      	str	r3, [r2, #28]
	TIM4_PERIPHERAL_CLK_EN();
 8000866:	4b42      	ldr	r3, [pc, #264]	; (8000970 <pwm+0x134>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a41      	ldr	r2, [pc, #260]	; (8000970 <pwm+0x134>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	61d3      	str	r3, [r2, #28]

	timer.TIMx = TIM2;
 8000872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000876:	603b      	str	r3, [r7, #0]
	timer_init(&timer);
 8000878:	463b      	mov	r3, r7
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fc56 	bl	800112c <timer_init>
	timer.TIMx = TIM3;
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <pwm+0x138>)
 8000882:	603b      	str	r3, [r7, #0]
	timer_init(&timer);
 8000884:	463b      	mov	r3, r7
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fc50 	bl	800112c <timer_init>
	timer.TIMx = TIM4;
 800088c:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <pwm+0x13c>)
 800088e:	603b      	str	r3, [r7, #0]
	timer_init(&timer);
 8000890:	463b      	mov	r3, r7
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fc4a 	bl	800112c <timer_init>

	pwm_init(TIM2,TIM_CH1);
 8000898:	2100      	movs	r1, #0
 800089a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800089e:	f000 fc6a 	bl	8001176 <pwm_init>
	pwm_init(TIM2,TIM_CH2);
 80008a2:	2101      	movs	r1, #1
 80008a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008a8:	f000 fc65 	bl	8001176 <pwm_init>

	pwm_init(TIM3,TIM_CH1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	4831      	ldr	r0, [pc, #196]	; (8000974 <pwm+0x138>)
 80008b0:	f000 fc61 	bl	8001176 <pwm_init>
	pwm_init(TIM3,TIM_CH2);
 80008b4:	2101      	movs	r1, #1
 80008b6:	482f      	ldr	r0, [pc, #188]	; (8000974 <pwm+0x138>)
 80008b8:	f000 fc5d 	bl	8001176 <pwm_init>
	pwm_init(TIM3,TIM_CH3);
 80008bc:	2102      	movs	r1, #2
 80008be:	482d      	ldr	r0, [pc, #180]	; (8000974 <pwm+0x138>)
 80008c0:	f000 fc59 	bl	8001176 <pwm_init>
	pwm_init(TIM3,TIM_CH4);
 80008c4:	2103      	movs	r1, #3
 80008c6:	482b      	ldr	r0, [pc, #172]	; (8000974 <pwm+0x138>)
 80008c8:	f000 fc55 	bl	8001176 <pwm_init>

	pwm_init(TIM4,TIM_CH1);
 80008cc:	2100      	movs	r1, #0
 80008ce:	482a      	ldr	r0, [pc, #168]	; (8000978 <pwm+0x13c>)
 80008d0:	f000 fc51 	bl	8001176 <pwm_init>
	pwm_init(TIM4,TIM_CH2);
 80008d4:	2101      	movs	r1, #1
 80008d6:	4828      	ldr	r0, [pc, #160]	; (8000978 <pwm+0x13c>)
 80008d8:	f000 fc4d 	bl	8001176 <pwm_init>
	pwm_init(TIM4,TIM_CH3);
 80008dc:	2102      	movs	r1, #2
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <pwm+0x13c>)
 80008e0:	f000 fc49 	bl	8001176 <pwm_init>
	pwm_init(TIM4,TIM_CH4);
 80008e4:	2103      	movs	r1, #3
 80008e6:	4824      	ldr	r0, [pc, #144]	; (8000978 <pwm+0x13c>)
 80008e8:	f000 fc45 	bl	8001176 <pwm_init>

	timer_enable(TIM2);
 80008ec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008f0:	f000 fce3 	bl	80012ba <timer_enable>
	timer_enable(TIM3);
 80008f4:	481f      	ldr	r0, [pc, #124]	; (8000974 <pwm+0x138>)
 80008f6:	f000 fce0 	bl	80012ba <timer_enable>
	timer_enable(TIM4);
 80008fa:	481f      	ldr	r0, [pc, #124]	; (8000978 <pwm+0x13c>)
 80008fc:	f000 fcdd 	bl	80012ba <timer_enable>

	duty(TIM2, TIM_CH1, 75);
 8000900:	224b      	movs	r2, #75	; 0x4b
 8000902:	2100      	movs	r1, #0
 8000904:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000908:	f000 fcac 	bl	8001264 <duty>
	duty(TIM2, TIM_CH2, 75);
 800090c:	224b      	movs	r2, #75	; 0x4b
 800090e:	2101      	movs	r1, #1
 8000910:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000914:	f000 fca6 	bl	8001264 <duty>
	duty(TIM3, TIM_CH1, 75);
 8000918:	224b      	movs	r2, #75	; 0x4b
 800091a:	2100      	movs	r1, #0
 800091c:	4815      	ldr	r0, [pc, #84]	; (8000974 <pwm+0x138>)
 800091e:	f000 fca1 	bl	8001264 <duty>
	duty(TIM3, TIM_CH2, 75);
 8000922:	224b      	movs	r2, #75	; 0x4b
 8000924:	2101      	movs	r1, #1
 8000926:	4813      	ldr	r0, [pc, #76]	; (8000974 <pwm+0x138>)
 8000928:	f000 fc9c 	bl	8001264 <duty>
	duty(TIM3, TIM_CH3, 75);
 800092c:	224b      	movs	r2, #75	; 0x4b
 800092e:	2102      	movs	r1, #2
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <pwm+0x138>)
 8000932:	f000 fc97 	bl	8001264 <duty>
	duty(TIM3, TIM_CH4, 75);
 8000936:	224b      	movs	r2, #75	; 0x4b
 8000938:	2103      	movs	r1, #3
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <pwm+0x138>)
 800093c:	f000 fc92 	bl	8001264 <duty>
	duty(TIM4, TIM_CH1, 75);
 8000940:	224b      	movs	r2, #75	; 0x4b
 8000942:	2100      	movs	r1, #0
 8000944:	480c      	ldr	r0, [pc, #48]	; (8000978 <pwm+0x13c>)
 8000946:	f000 fc8d 	bl	8001264 <duty>
	duty(TIM4, TIM_CH2, 75);
 800094a:	224b      	movs	r2, #75	; 0x4b
 800094c:	2101      	movs	r1, #1
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <pwm+0x13c>)
 8000950:	f000 fc88 	bl	8001264 <duty>
	duty(TIM4, TIM_CH3, 75);
 8000954:	224b      	movs	r2, #75	; 0x4b
 8000956:	2102      	movs	r1, #2
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <pwm+0x13c>)
 800095a:	f000 fc83 	bl	8001264 <duty>
	duty(TIM4, TIM_CH4, 75);
 800095e:	224b      	movs	r2, #75	; 0x4b
 8000960:	2103      	movs	r1, #3
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <pwm+0x13c>)
 8000964:	f000 fc7e 	bl	8001264 <duty>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	40000400 	.word	0x40000400
 8000978:	40000800 	.word	0x40000800

0800097c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000980:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009aa:	f000 fe51 	bl	8001650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fe15 	bl	80005dc <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   r0, =_estack
 80009b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c0:	080016b8 	.word	0x080016b8
  ldr r2, =_sbss
 80009c4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009c8:	20000538 	.word	0x20000538

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>
	...

080009d0 <gpio_clock_ctl>:
 *      Author: 82107
 */
#include "driver.h "

void gpio_clock_ctl(GPIO_t *GPIOx)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	if(GPIOx == GPIOA)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <gpio_clock_ctl+0x80>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <gpio_clock_ctl+0x1e>
	{
		GPIOA_PERIPHERAL_CLK_EN();
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <gpio_clock_ctl+0x84>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	; (8000a54 <gpio_clock_ctl+0x84>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
	}
	else if(GPIOx == GPIOE)
	{
		GPIOE_PERIPHERAL_CLK_EN();
	}
}
 80009ec:	e02a      	b.n	8000a44 <gpio_clock_ctl+0x74>
	else if(GPIOx == GPIOB)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <gpio_clock_ctl+0x88>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <gpio_clock_ctl+0x34>
		GPIOB_PERIPHERAL_CLK_EN();
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <gpio_clock_ctl+0x84>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <gpio_clock_ctl+0x84>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	6193      	str	r3, [r2, #24]
}
 8000a02:	e01f      	b.n	8000a44 <gpio_clock_ctl+0x74>
	else if(GPIOx == GPIOC)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <gpio_clock_ctl+0x8c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d106      	bne.n	8000a1a <gpio_clock_ctl+0x4a>
		GPIOC_PERIPHERAL_CLK_EN();
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6193      	str	r3, [r2, #24]
}
 8000a18:	e014      	b.n	8000a44 <gpio_clock_ctl+0x74>
	else if(GPIOx == GPIOD)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a10      	ldr	r2, [pc, #64]	; (8000a60 <gpio_clock_ctl+0x90>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d106      	bne.n	8000a30 <gpio_clock_ctl+0x60>
		GPIOD_PERIPHERAL_CLK_EN();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a28:	f043 0320 	orr.w	r3, r3, #32
 8000a2c:	6193      	str	r3, [r2, #24]
}
 8000a2e:	e009      	b.n	8000a44 <gpio_clock_ctl+0x74>
	else if(GPIOx == GPIOE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <gpio_clock_ctl+0x94>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d105      	bne.n	8000a44 <gpio_clock_ctl+0x74>
		GPIOE_PERIPHERAL_CLK_EN();
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <gpio_clock_ctl+0x84>)
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a42:	6193      	str	r3, [r2, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40010800 	.word	0x40010800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40011400 	.word	0x40011400
 8000a64:	40011800 	.word	0x40011800

08000a68 <gpio_init>:

void gpio_init(GPIO_handle_t *GPIO_handle)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint8_t HLflag = GPIO_handle->config.PIN_NO / 8;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	08db      	lsrs	r3, r3, #3
 8000a76:	73fb      	strb	r3, [r7, #15]
	uint8_t offset = (GPIO_handle->config.PIN_NO % 8) * 4;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	791b      	ldrb	r3, [r3, #4]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	73bb      	strb	r3, [r7, #14]
	if(GPIO_handle->config.MODE == GPIO_MODE_IP_AN)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f000 82e2 	beq.w	8001054 <gpio_init+0x5ec>
	{
		// ANALOG configuration later
	}
	else if(GPIO_handle->config.MODE == GPIO_MODE_IP_FL)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	795b      	ldrb	r3, [r3, #5]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d136      	bne.n	8000b06 <gpio_init+0x9e>
	{
		if(HLflag == 1)
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d119      	bne.n	8000ad2 <gpio_init+0x6a>
		{
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	7bbb      	ldrb	r3, [r7, #14]
 8000aa6:	210f      	movs	r1, #15
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4619      	mov	r1, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	605a      	str	r2, [r3, #4]
			GPIO_handle->GPIOx->CRH |= (4 << offset);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	685a      	ldr	r2, [r3, #4]
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2104      	movs	r1, #4
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	430a      	orrs	r2, r1
 8000ace:	605a      	str	r2, [r3, #4]
			{
				GPIO_handle->GPIOx->CRL |= (15 << offset);
			}
		}
	}
}
 8000ad0:	e2c0      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	7bbb      	ldrb	r3, [r7, #14]
 8000ada:	210f      	movs	r1, #15
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	400a      	ands	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
			GPIO_handle->GPIOx->CRL |= (4 << offset);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	2104      	movs	r1, #4
 8000af6:	fa01 f303 	lsl.w	r3, r1, r3
 8000afa:	4619      	mov	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	e2a6      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == GPIO_MODE_IP_PD)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	795b      	ldrb	r3, [r3, #5]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d152      	bne.n	8000bb4 <gpio_init+0x14c>
		if(HLflag == 1)
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d127      	bne.n	8000b64 <gpio_init+0xfc>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	4619      	mov	r1, r3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	400a      	ands	r2, r1
 8000b2c:	605a      	str	r2, [r3, #4]
			GPIO_handle->GPIOx->CRH |= (8 << offset);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	685a      	ldr	r2, [r3, #4]
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	2108      	movs	r1, #8
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	430a      	orrs	r2, r1
 8000b44:	605a      	str	r2, [r3, #4]
			GPIO_handle->GPIOx->ODR &= ~(1 << GPIO_handle->config.PIN_NO);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	4619      	mov	r1, r3
 8000b52:	2301      	movs	r3, #1
 8000b54:	408b      	lsls	r3, r1
 8000b56:	43db      	mvns	r3, r3
 8000b58:	4619      	mov	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	400a      	ands	r2, r1
 8000b60:	60da      	str	r2, [r3, #12]
}
 8000b62:	e277      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	601a      	str	r2, [r3, #0]
			GPIO_handle->GPIOx->CRL |= (8 << offset);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	7bbb      	ldrb	r3, [r7, #14]
 8000b86:	2108      	movs	r1, #8
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
			GPIO_handle->GPIOx->ODR &= ~(1 << GPIO_handle->config.PIN_NO);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	408b      	lsls	r3, r1
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4619      	mov	r1, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	400a      	ands	r2, r1
 8000bb0:	60da      	str	r2, [r3, #12]
}
 8000bb2:	e24f      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == GPIO_MODE_IP_PU)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	795b      	ldrb	r3, [r3, #5]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d150      	bne.n	8000c5e <gpio_init+0x1f6>
		if(HLflag == 1)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d126      	bne.n	8000c10 <gpio_init+0x1a8>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	7bbb      	ldrb	r3, [r7, #14]
 8000bca:	210f      	movs	r1, #15
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	400a      	ands	r2, r1
 8000bda:	605a      	str	r2, [r3, #4]
			GPIO_handle->GPIOx->CRH |= (8 << offset);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	685a      	ldr	r2, [r3, #4]
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	2108      	movs	r1, #8
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	4619      	mov	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	605a      	str	r2, [r3, #4]
			GPIO_handle->GPIOx->ODR |= (1 << GPIO_handle->config.PIN_NO);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	68da      	ldr	r2, [r3, #12]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	791b      	ldrb	r3, [r3, #4]
 8000bfe:	4619      	mov	r1, r3
 8000c00:	2301      	movs	r3, #1
 8000c02:	408b      	lsls	r3, r1
 8000c04:	4619      	mov	r1, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]
}
 8000c0e:	e221      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	7bbb      	ldrb	r3, [r7, #14]
 8000c18:	210f      	movs	r1, #15
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	400a      	ands	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
			GPIO_handle->GPIOx->CRL |= (8 << offset);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	2108      	movs	r1, #8
 8000c34:	fa01 f303 	lsl.w	r3, r1, r3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
			GPIO_handle->GPIOx->ODR |= (1 << GPIO_handle->config.PIN_NO);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	791b      	ldrb	r3, [r3, #4]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	2301      	movs	r3, #1
 8000c50:	408b      	lsls	r3, r1
 8000c52:	4619      	mov	r1, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	60da      	str	r2, [r3, #12]
}
 8000c5c:	e1fa      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == GPIO_MODE_OP_PP)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	795b      	ldrb	r3, [r3, #5]
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d17a      	bne.n	8000d5c <gpio_init+0x2f4>
		if(HLflag == 1)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d13b      	bne.n	8000ce4 <gpio_init+0x27c>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	7bbb      	ldrb	r3, [r7, #14]
 8000c74:	210f      	movs	r1, #15
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	400a      	ands	r2, r1
 8000c84:	605a      	str	r2, [r3, #4]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	799b      	ldrb	r3, [r3, #6]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10c      	bne.n	8000ca8 <gpio_init+0x240>
				GPIO_handle->GPIOx->CRH |= (1 << offset);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	605a      	str	r2, [r3, #4]
}
 8000ca6:	e1d5      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	799b      	ldrb	r3, [r3, #6]
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d10c      	bne.n	8000cca <gpio_init+0x262>
				GPIO_handle->GPIOx->CRH |= (2 << offset);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	7bbb      	ldrb	r3, [r7, #14]
 8000cb8:	2102      	movs	r1, #2
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	605a      	str	r2, [r3, #4]
}
 8000cc8:	e1c4      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRH |= (3 << offset);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	2103      	movs	r1, #3
 8000cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd8:	4619      	mov	r1, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	605a      	str	r2, [r3, #4]
}
 8000ce2:	e1b7      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
 8000cec:	210f      	movs	r1, #15
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	799b      	ldrb	r3, [r3, #6]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10c      	bne.n	8000d20 <gpio_init+0x2b8>
				GPIO_handle->GPIOx->CRL |= (1 << offset);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fa01 f303 	lsl.w	r3, r1, r3
 8000d14:	4619      	mov	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	e199      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	799b      	ldrb	r3, [r3, #6]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d10c      	bne.n	8000d42 <gpio_init+0x2da>
				GPIO_handle->GPIOx->CRL |= (2 << offset);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	2102      	movs	r1, #2
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	601a      	str	r2, [r3, #0]
}
 8000d40:	e188      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRL |= (3 << offset);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	7bbb      	ldrb	r3, [r7, #14]
 8000d4a:	2103      	movs	r1, #3
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	e17b      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == GPIO_MODE_OP_OD)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	2b05      	cmp	r3, #5
 8000d62:	d17a      	bne.n	8000e5a <gpio_init+0x3f2>
		if(HLflag == 1)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d13b      	bne.n	8000de2 <gpio_init+0x37a>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	7bbb      	ldrb	r3, [r7, #14]
 8000d72:	210f      	movs	r1, #15
 8000d74:	fa01 f303 	lsl.w	r3, r1, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	400a      	ands	r2, r1
 8000d82:	605a      	str	r2, [r3, #4]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	799b      	ldrb	r3, [r3, #6]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10c      	bne.n	8000da6 <gpio_init+0x33e>
				GPIO_handle->GPIOx->CRH |= (5 << offset);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	7bbb      	ldrb	r3, [r7, #14]
 8000d94:	2105      	movs	r1, #5
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]
}
 8000da4:	e156      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	799b      	ldrb	r3, [r3, #6]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d10c      	bne.n	8000dc8 <gpio_init+0x360>
				GPIO_handle->GPIOx->CRH |= (6 << offset);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	7bbb      	ldrb	r3, [r7, #14]
 8000db6:	2106      	movs	r1, #6
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	605a      	str	r2, [r3, #4]
}
 8000dc6:	e145      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRH |= (7 << offset);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]
}
 8000de0:	e138      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	7bbb      	ldrb	r3, [r7, #14]
 8000dea:	210f      	movs	r1, #15
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	4619      	mov	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d10c      	bne.n	8000e1e <gpio_init+0x3b6>
				GPIO_handle->GPIOx->CRL |= (5 << offset);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	2105      	movs	r1, #5
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	601a      	str	r2, [r3, #0]
}
 8000e1c:	e11a      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	799b      	ldrb	r3, [r3, #6]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d10c      	bne.n	8000e40 <gpio_init+0x3d8>
				GPIO_handle->GPIOx->CRL |= (6 << offset);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	2106      	movs	r1, #6
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	4619      	mov	r1, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	e109      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRL |= (7 << offset);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	2107      	movs	r1, #7
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	4619      	mov	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	430a      	orrs	r2, r1
 8000e56:	601a      	str	r2, [r3, #0]
}
 8000e58:	e0fc      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == AFIO_MODE_OP_PP)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	795b      	ldrb	r3, [r3, #5]
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d17a      	bne.n	8000f58 <gpio_init+0x4f0>
		if(HLflag == 1)
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d13b      	bne.n	8000ee0 <gpio_init+0x478>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	210f      	movs	r1, #15
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4619      	mov	r1, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	400a      	ands	r2, r1
 8000e80:	605a      	str	r2, [r3, #4]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	799b      	ldrb	r3, [r3, #6]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d10c      	bne.n	8000ea4 <gpio_init+0x43c>
				GPIO_handle->GPIOx->CRH |= (9 << offset);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	2109      	movs	r1, #9
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	605a      	str	r2, [r3, #4]
}
 8000ea2:	e0d7      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d10c      	bne.n	8000ec6 <gpio_init+0x45e>
				GPIO_handle->GPIOx->CRH |= (10 << offset);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	210a      	movs	r1, #10
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	4619      	mov	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	605a      	str	r2, [r3, #4]
}
 8000ec4:	e0c6      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRH |= (11 << offset);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	7bbb      	ldrb	r3, [r7, #14]
 8000ece:	210b      	movs	r1, #11
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	605a      	str	r2, [r3, #4]
}
 8000ede:	e0b9      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	210f      	movs	r1, #15
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	601a      	str	r2, [r3, #0]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	799b      	ldrb	r3, [r3, #6]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d10c      	bne.n	8000f1c <gpio_init+0x4b4>
				GPIO_handle->GPIOx->CRL |= (9 << offset);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	7bbb      	ldrb	r3, [r7, #14]
 8000f0a:	2109      	movs	r1, #9
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	430a      	orrs	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]
}
 8000f1a:	e09b      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	799b      	ldrb	r3, [r3, #6]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d10c      	bne.n	8000f3e <gpio_init+0x4d6>
				GPIO_handle->GPIOx->CRL |= (10 << offset);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	210a      	movs	r1, #10
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	4619      	mov	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	e08a      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRL |= (11 << offset);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	210b      	movs	r1, #11
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
}
 8000f56:	e07d      	b.n	8001054 <gpio_init+0x5ec>
	else if(GPIO_handle->config.MODE == AFIO_MODE_OP_OD)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	795b      	ldrb	r3, [r3, #5]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d179      	bne.n	8001054 <gpio_init+0x5ec>
		if(HLflag == 1)
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d13b      	bne.n	8000fde <gpio_init+0x576>
			GPIO_handle->GPIOx->CRH &= ~(15 << offset);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	210f      	movs	r1, #15
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10c      	bne.n	8000fa2 <gpio_init+0x53a>
				GPIO_handle->GPIOx->CRH |= (13 << offset);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685a      	ldr	r2, [r3, #4]
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	210d      	movs	r1, #13
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	4619      	mov	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	605a      	str	r2, [r3, #4]
}
 8000fa0:	e058      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	799b      	ldrb	r3, [r3, #6]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d10c      	bne.n	8000fc4 <gpio_init+0x55c>
				GPIO_handle->GPIOx->CRH |= (14 << offset);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	210e      	movs	r1, #14
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4619      	mov	r1, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	605a      	str	r2, [r3, #4]
}
 8000fc2:	e047      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRH |= (15 << offset);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	210f      	movs	r1, #15
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	605a      	str	r2, [r3, #4]
}
 8000fdc:	e03a      	b.n	8001054 <gpio_init+0x5ec>
			GPIO_handle->GPIOx->CRL &= ~(15 << offset);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	4619      	mov	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
			if(GPIO_handle->config.SPEED == GPIO_SPEED_10MH)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	799b      	ldrb	r3, [r3, #6]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10c      	bne.n	800101a <gpio_init+0x5b2>
				GPIO_handle->GPIOx->CRL |= (13 << offset);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	210d      	movs	r1, #13
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	4619      	mov	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
}
 8001018:	e01c      	b.n	8001054 <gpio_init+0x5ec>
			else if(GPIO_handle->config.SPEED == GPIO_SPEED_2MH)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	799b      	ldrb	r3, [r3, #6]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d10c      	bne.n	800103c <gpio_init+0x5d4>
				GPIO_handle->GPIOx->CRL |= (14 << offset);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	210e      	movs	r1, #14
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4619      	mov	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	e00b      	b.n	8001054 <gpio_init+0x5ec>
				GPIO_handle->GPIOx->CRL |= (15 << offset);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	210f      	movs	r1, #15
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	4619      	mov	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
	...

08001060 <configure_sysclk>:
 *      Author: 82107
 */
#include "driver.h"

void configure_sysclk(RCC_handle_t *RCC_handle)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	// 1. Configure PLL
	RCC_handle->RCCptr->CFGR |= (RCC_handle->config.MHZ << 18);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	791b      	ldrb	r3, [r3, #4]
 8001072:	049b      	lsls	r3, r3, #18
 8001074:	4619      	mov	r1, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]
	RCC_handle->RCCptr->CFGR &= ~(1 << 16);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800108c:	605a      	str	r2, [r3, #4]
	// 2. Enable PLL and wait flag
	RCC_handle->RCCptr->CR |= (1 << 24);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800109c:	601a      	str	r2, [r3, #0]
	while( !( RCC_handle->RCCptr->CR & (1 << 25) ) );
 800109e:	bf00      	nop
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f8      	beq.n	80010a0 <configure_sysclk+0x40>
	// 3. Initialize bus prescalers
	uint32_t tmp = 0U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
	//tmp |= (RCC_handle->config.AHB_DIV << 4);
	tmp |= (RCC_handle->config.APB1_DIV << 8);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	795b      	ldrb	r3, [r3, #5]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	461a      	mov	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
	tmp |= (RCC_handle->config.APB1_DIV << 11);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	795b      	ldrb	r3, [r3, #5]
 80010c4:	02db      	lsls	r3, r3, #11
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
	RCC_handle->RCCptr->CFGR |= tmp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	430a      	orrs	r2, r1
 80010dc:	605a      	str	r2, [r3, #4]
	// 4. Configure flash latency
	if(RCC_handle->config.MHZ <= RCC_SYSCLK_24MH)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d804      	bhi.n	80010f0 <configure_sysclk+0x90>
	{
		*FLASH_ACR |= ZERO_WAIT_STATE;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <configure_sysclk+0xc8>)
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <configure_sysclk+0xc8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e005      	b.n	80010fc <configure_sysclk+0x9c>
	}
	else
	{
		*FLASH_ACR |= ONE_WAIT_STATE;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <configure_sysclk+0xc8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <configure_sysclk+0xc8>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]
	}
	// 5. Select PLL as  sysclk
	RCC_handle->RCCptr->CFGR |= 2;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0202 	orr.w	r2, r2, #2
 800110a:	605a      	str	r2, [r3, #4]
	while((RCC_handle->RCCptr->CFGR & (0x3 << 2)) != 0x8);
 800110c:	bf00      	nop
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 030c 	and.w	r3, r3, #12
 8001118:	2b08      	cmp	r3, #8
 800111a:	d1f8      	bne.n	800110e <configure_sysclk+0xae>
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	40022000 	.word	0x40022000

0800112c <timer_init>:
 *      Author: 82107
 */
#include "driver.h"

void timer_init(TIM_handle_t* TIM_handle)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]

	TIM_handle->TIMx->PSC = TIM_handle->config.PSC - 1;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	889b      	ldrh	r3, [r3, #4]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM_handle->TIMx->ARR = TIM_handle->config.ARR - 1;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	88db      	ldrh	r3, [r3, #6]
 8001144:	1e5a      	subs	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM_handle->TIMx->CR1 |= 1 << 7;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115a:	601a      	str	r2, [r3, #0]

	//TIM_handle->TIMx->DIER |= 1 << 0;
	//irq_ctl(RETURN_TIM_IRQ_NO(TIM_handle->TIMx), SET);

	// TIMER update
	TIM_handle->TIMx->EGR |= 1 << 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0201 	orr.w	r2, r2, #1
 800116a:	615a      	str	r2, [r3, #20]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr

08001176 <pwm_init>:

void pwm_init(TIM_t *TIMx, uint8_t ch)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]

	if(ch == TIM_CH1)
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d118      	bne.n	80011ba <pwm_init+0x44>
	{
		TIMx->CCMR1 |= 6 << 4;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |= 1 << 3;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f043 0208 	orr.w	r2, r3, #8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]

		TIMx->EGR |= 1 << 0;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f043 0201 	orr.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	615a      	str	r2, [r3, #20]

		TIMx->CCER |= 1 << 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	621a      	str	r2, [r3, #32]

		TIMx->EGR |= 1 << 0;

		TIMx->CCER |= 1 << 12;
	}
}
 80011b8:	e04f      	b.n	800125a <pwm_init+0xe4>
	else if(ch == TIM_CH2)
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d118      	bne.n	80011f2 <pwm_init+0x7c>
		TIMx->CCMR1 |= 6 << 12;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
		TIMx->CCMR1 |= 1 << 11;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
		TIMx->EGR |= 1 << 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f043 0201 	orr.w	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	615a      	str	r2, [r3, #20]
		TIMx->CCER |= 1 << 4;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f043 0210 	orr.w	r2, r3, #16
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	621a      	str	r2, [r3, #32]
}
 80011f0:	e033      	b.n	800125a <pwm_init+0xe4>
	else if(ch == TIM_CH3)
 80011f2:	78fb      	ldrb	r3, [r7, #3]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d118      	bne.n	800122a <pwm_init+0xb4>
		TIMx->CCMR2 |= 6 << 4;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |= 1 << 3;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	f043 0208 	orr.w	r2, r3, #8
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	61da      	str	r2, [r3, #28]
		TIMx->EGR |= 1 << 0;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	615a      	str	r2, [r3, #20]
		TIMx->CCER |= 1 << 8;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	621a      	str	r2, [r3, #32]
}
 8001228:	e017      	b.n	800125a <pwm_init+0xe4>
		TIMx->CCMR2 |= 6 << 12;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
		TIMx->CCMR2 |= 1 << 11;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	61da      	str	r2, [r3, #28]
		TIMx->EGR |= 1 << 0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	615a      	str	r2, [r3, #20]
		TIMx->CCER |= 1 << 12;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	621a      	str	r2, [r3, #32]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <duty>:

void duty(TIM_t *TIMx, uint8_t ch, uint16_t duty)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
 8001270:	4613      	mov	r3, r2
 8001272:	803b      	strh	r3, [r7, #0]
	if(ch == TIM_CH1)
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d103      	bne.n	8001282 <duty+0x1e>
	{
		TIMx->CCR1 = duty;
 800127a:	883a      	ldrh	r2, [r7, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
 8001280:	e010      	b.n	80012a4 <duty+0x40>
	}
	else if(ch == TIM_CH2)
 8001282:	78fb      	ldrb	r3, [r7, #3]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d103      	bne.n	8001290 <duty+0x2c>
	{
		TIMx->CCR2 = duty;
 8001288:	883a      	ldrh	r2, [r7, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
 800128e:	e009      	b.n	80012a4 <duty+0x40>
	}
	else if(ch == TIM_CH3)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b02      	cmp	r3, #2
 8001294:	d103      	bne.n	800129e <duty+0x3a>
	{
		TIMx->CCR3 = duty;
 8001296:	883a      	ldrh	r2, [r7, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	63da      	str	r2, [r3, #60]	; 0x3c
 800129c:	e002      	b.n	80012a4 <duty+0x40>
	}
	else
	{
		TIMx->CCR4 = duty;
 800129e:	883a      	ldrh	r2, [r7, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
	}

	// TIMER update
	TIMx->EGR |= 1 << 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <timer_enable>:

void timer_enable(TIM_t *TIMx)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
	TIMx->CR1 |= 1 << 0;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <usart_init>:
 *      Author: injog
 */
#include "driver.h"
int sem = 0;
void usart_init(USART_t * pUSARTx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 if(pUSARTx == USART1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a28      	ldr	r2, [pc, #160]	; (8001384 <usart_init+0xac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d106      	bne.n	80012f6 <usart_init+0x1e>
	 {
		 RCC->APB2ENR |= 1 << 14;
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <usart_init+0xb0>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <usart_init+0xb0>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	e02a      	b.n	800134c <usart_init+0x74>
	 }
	 else if(pUSARTx == USART2)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <usart_init+0xb4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d106      	bne.n	800130c <usart_init+0x34>
	 {
		 RCC->APB1ENR |= 1 << 17;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <usart_init+0xb0>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a21      	ldr	r2, [pc, #132]	; (8001388 <usart_init+0xb0>)
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	e01f      	b.n	800134c <usart_init+0x74>
	 }
	 else if(pUSARTx == USART3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a20      	ldr	r2, [pc, #128]	; (8001390 <usart_init+0xb8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d106      	bne.n	8001322 <usart_init+0x4a>
	 {
		 RCC->APB1ENR |= 1 << 18;
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <usart_init+0xb0>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <usart_init+0xb0>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800131e:	61d3      	str	r3, [r2, #28]
 8001320:	e014      	b.n	800134c <usart_init+0x74>
	 }
	 else if(pUSARTx == UART4)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <usart_init+0xbc>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d106      	bne.n	8001338 <usart_init+0x60>
	 {
		 RCC->APB1ENR |= 1 << 19;
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <usart_init+0xb0>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a16      	ldr	r2, [pc, #88]	; (8001388 <usart_init+0xb0>)
 8001330:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001334:	61d3      	str	r3, [r2, #28]
 8001336:	e009      	b.n	800134c <usart_init+0x74>
	 }
	 else if(pUSARTx == UART5)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <usart_init+0xc0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d105      	bne.n	800134c <usart_init+0x74>
	 {
		 RCC->APB1ENR |= 1 << 20;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <usart_init+0xb0>)
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	4a10      	ldr	r2, [pc, #64]	; (8001388 <usart_init+0xb0>)
 8001346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800134a:	61d3      	str	r3, [r2, #28]
	 }

	 pUSARTx->CR1 |= 1 << 13;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]

	 pUSARTx->BRR = 0x683;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f240 6283 	movw	r2, #1667	; 0x683
 800135e:	609a      	str	r2, [r3, #8]


	 pUSARTx->CR1 |= 1 << 2;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f043 0204 	orr.w	r2, r3, #4
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]
	 pUSARTx->CR1 |= 1 << 3;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f043 0208 	orr.w	r2, r3, #8
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]


}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40013800 	.word	0x40013800
 8001388:	40021000 	.word	0x40021000
 800138c:	40004400 	.word	0x40004400
 8001390:	40004800 	.word	0x40004800
 8001394:	40004c00 	.word	0x40004c00
 8001398:	40005000 	.word	0x40005000

0800139c <usart_getc>:
    while(!(pUSARTx->SR & (1 << 6)));
}


uint8_t usart_getc(USART_t * pUSARTx)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	uint8_t data;
    while(!(pUSARTx->SR & (1 << 5)));   //wait for Rx Not Empty flag
 80013a4:	bf00      	nop
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <usart_getc+0xa>
    data = (uint8_t)pUSARTx->DR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
    return data; //read from DR register
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <USART1_IRQHandler>:
	}
	pUSARTx->CR1 |= (1<<7) | (1<<6) | ((1<<5));
}

void USART1_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
	uint8_t data;
	data = usart_getc(USART1);
 80013ca:	481b      	ldr	r0, [pc, #108]	; (8001438 <USART1_IRQHandler+0x74>)
 80013cc:	f7ff ffe6 	bl	800139c <usart_getc>
 80013d0:	4603      	mov	r3, r0
 80013d2:	71fb      	strb	r3, [r7, #7]
	if(data == 'a')
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	2b61      	cmp	r3, #97	; 0x61
 80013d8:	d129      	bne.n	800142e <USART1_IRQHandler+0x6a>
	{
		//gpio_toggle_pin(GPIOA, GPIO_PIN_NO5);
		duty(TIM2, TIM_CH2, 90);
 80013da:	225a      	movs	r2, #90	; 0x5a
 80013dc:	2101      	movs	r1, #1
 80013de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013e2:	f7ff ff3f 	bl	8001264 <duty>
		duty(TIM3, TIM_CH3, 50);
 80013e6:	2232      	movs	r2, #50	; 0x32
 80013e8:	2102      	movs	r1, #2
 80013ea:	4814      	ldr	r0, [pc, #80]	; (800143c <USART1_IRQHandler+0x78>)
 80013ec:	f7ff ff3a 	bl	8001264 <duty>
		//4's leg
		duty(TIM3, TIM_CH2, 60);
 80013f0:	223c      	movs	r2, #60	; 0x3c
 80013f2:	2101      	movs	r1, #1
 80013f4:	4811      	ldr	r0, [pc, #68]	; (800143c <USART1_IRQHandler+0x78>)
 80013f6:	f7ff ff35 	bl	8001264 <duty>
		duty(TIM4, TIM_CH1, 100);
 80013fa:	2264      	movs	r2, #100	; 0x64
 80013fc:	2100      	movs	r1, #0
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <USART1_IRQHandler+0x7c>)
 8001400:	f7ff ff30 	bl	8001264 <duty>
		//1's leg
		duty(TIM4, TIM_CH2, 90);
 8001404:	225a      	movs	r2, #90	; 0x5a
 8001406:	2101      	movs	r1, #1
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <USART1_IRQHandler+0x7c>)
 800140a:	f7ff ff2b 	bl	8001264 <duty>
		duty(TIM2, TIM_CH1, 50);
 800140e:	2232      	movs	r2, #50	; 0x32
 8001410:	2100      	movs	r1, #0
 8001412:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001416:	f7ff ff25 	bl	8001264 <duty>
		//3's leg
		duty(TIM4, TIM_CH4, 60);
 800141a:	223c      	movs	r2, #60	; 0x3c
 800141c:	2103      	movs	r1, #3
 800141e:	4808      	ldr	r0, [pc, #32]	; (8001440 <USART1_IRQHandler+0x7c>)
 8001420:	f7ff ff20 	bl	8001264 <duty>
		duty(TIM3, TIM_CH1, 100);
 8001424:	2264      	movs	r2, #100	; 0x64
 8001426:	2100      	movs	r1, #0
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <USART1_IRQHandler+0x78>)
 800142a:	f7ff ff1b 	bl	8001264 <duty>
		{
			delay--;
		}
		*/
	}
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40013800 	.word	0x40013800
 800143c:	40000400 	.word	0x40000400
 8001440:	40000800 	.word	0x40000800

08001444 <init_systick_timer>:
	*pSHCSR |= (1 << 17);
	*pSHCSR |= (1 << 18);

}
void init_systick_timer(uint32_t tick_hz)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	volatile uint32_t *pSRVR = (uint32_t *)0xE000E014;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <init_systick_timer+0x84>)
 800144e:	617b      	str	r3, [r7, #20]
	volatile uint32_t *pSCSR = (uint32_t *)0xE000E010;
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <init_systick_timer+0x88>)
 8001452:	613b      	str	r3, [r7, #16]
	volatile uint32_t *SYSPRI3 = (uint32_t *)0xE000ED20;
 8001454:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <init_systick_timer+0x8c>)
 8001456:	60fb      	str	r3, [r7, #12]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <init_systick_timer+0x90>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001460:	3b01      	subs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]

	*pSRVR &= ~0xFFFFFFFF;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]

	*pSRVR |= count_value;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]

	*SYSPRI3 = (*SYSPRI3&0x00FFFFFF) | 0xE0000000;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001482:	f043 4260 	orr.w	r2, r3, #3758096384	; 0xe0000000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]
	*SYSPRI3 = (*SYSPRI3&0xFF00FFFF) | 0x00F00000;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001492:	f443 0270 	orr.w	r2, r3, #15728640	; 0xf00000
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 1);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f043 0202 	orr.w	r2, r3, #2
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	601a      	str	r2, [r3, #0]

	*pSCSR |= (1 << 0);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f043 0201 	orr.w	r2, r3, #1
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	601a      	str	r2, [r3, #0]

}
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e014 	.word	0xe000e014
 80014cc:	e000e010 	.word	0xe000e010
 80014d0:	e000ed20 	.word	0xe000ed20
 80014d4:	00f42400 	.word	0x00f42400

080014d8 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	tick++;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <SysTick_Handler+0xc8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	4a30      	ldr	r2, [pc, #192]	; (80015a0 <SysTick_Handler+0xc8>)
 80014e0:	6013      	str	r3, [r2, #0]
	tmp = current_prio;
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <SysTick_Handler+0xcc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	4b2f      	ldr	r3, [pc, #188]	; (80015a8 <SysTick_Handler+0xd0>)
 80014ea:	701a      	strb	r2, [r3, #0]
	for(count=0; count<ntask; count++)
 80014ec:	4b2f      	ldr	r3, [pc, #188]	; (80015ac <SysTick_Handler+0xd4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e034      	b.n	800155e <SysTick_Handler+0x86>
	{
		if(--TCB[count].delay <= 0)
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <SysTick_Handler+0xd4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	492d      	ldr	r1, [pc, #180]	; (80015b0 <SysTick_Handler+0xd8>)
 80014fa:	011a      	lsls	r2, r3, #4
 80014fc:	440a      	add	r2, r1
 80014fe:	320c      	adds	r2, #12
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	1e51      	subs	r1, r2, #1
 8001504:	482a      	ldr	r0, [pc, #168]	; (80015b0 <SysTick_Handler+0xd8>)
 8001506:	011a      	lsls	r2, r3, #4
 8001508:	4402      	add	r2, r0
 800150a:	320c      	adds	r2, #12
 800150c:	6011      	str	r1, [r2, #0]
 800150e:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <SysTick_Handler+0xd8>)
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	330c      	adds	r3, #12
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	dc1b      	bgt.n	8001554 <SysTick_Handler+0x7c>
		{
			TCB[count].delay = 0;
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <SysTick_Handler+0xd4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <SysTick_Handler+0xd8>)
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	330c      	adds	r3, #12
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
			if(TCB[count].prio < tmp)
 800152c:	4b1f      	ldr	r3, [pc, #124]	; (80015ac <SysTick_Handler+0xd4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <SysTick_Handler+0xd8>)
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	4413      	add	r3, r2
 8001536:	3308      	adds	r3, #8
 8001538:	781a      	ldrb	r2, [r3, #0]
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <SysTick_Handler+0xd0>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d208      	bcs.n	8001554 <SysTick_Handler+0x7c>
				tmp = TCB[count].prio;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <SysTick_Handler+0xd4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <SysTick_Handler+0xd8>)
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	3308      	adds	r3, #8
 800154e:	781a      	ldrb	r2, [r3, #0]
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <SysTick_Handler+0xd0>)
 8001552:	701a      	strb	r2, [r3, #0]
	for(count=0; count<ntask; count++)
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <SysTick_Handler+0xd4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <SysTick_Handler+0xd4>)
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <SysTick_Handler+0xdc>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	461a      	mov	r2, r3
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <SysTick_Handler+0xd4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	429a      	cmp	r2, r3
 800156a:	dcc3      	bgt.n	80014f4 <SysTick_Handler+0x1c>
		}
	}


	if(current_prio != tmp)
 800156c:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <SysTick_Handler+0xd0>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <SysTick_Handler+0xcc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d010      	beq.n	800159c <SysTick_Handler+0xc4>
	{
		current_prio = tmp;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <SysTick_Handler+0xd0>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <SysTick_Handler+0xcc>)
 8001582:	601a      	str	r2, [r3, #0]
		next_task = prio_task[tmp];
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <SysTick_Handler+0xd0>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <SysTick_Handler+0xe0>)
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Handler+0xe4>)
 8001592:	6013      	str	r3, [r2, #0]
		//call sched
		*INTCTRL = 0x10000000;
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <SysTick_Handler+0xe8>)
 8001596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800159a:	601a      	str	r2, [r3, #0]
	}

	__asm("BX LR");
 800159c:	4770      	bx	lr
}
 800159e:	bf00      	nop
 80015a0:	2000002c 	.word	0x2000002c
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004
 80015ac:	20000030 	.word	0x20000030
 80015b0:	20000034 	.word	0x20000034
 80015b4:	20000434 	.word	0x20000434
 80015b8:	20000438 	.word	0x20000438
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	e000ed04 	.word	0xe000ed04

080015c4 <PendSV_Handler>:
void PendSV_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
	__asm("CPSID I");
 80015c8:	b672      	cpsid	i

	__asm("MRS R0, PSP");
 80015ca:	f3ef 8009 	mrs	r0, PSP
	__asm("STMDB R0!, {R4-R11}");
 80015ce:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("LDR R1, =current_task");
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <PendSV_Handler+0x34>)
	__asm("LDR R1, [R1]");
 80015d4:	6809      	ldr	r1, [r1, #0]
	__asm("STR R0, [R1]");
 80015d6:	6008      	str	r0, [r1, #0]

	__asm("LDR R1, =next_task");
 80015d8:	4908      	ldr	r1, [pc, #32]	; (80015fc <PendSV_Handler+0x38>)
	__asm("LDR R1, [R1]");
 80015da:	6809      	ldr	r1, [r1, #0]
	__asm("LDR R0, =current_task");
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <PendSV_Handler+0x34>)
	__asm("STR R1, [R0]");
 80015de:	6001      	str	r1, [r0, #0]
	__asm("LDR R0, [R0]");
 80015e0:	6800      	ldr	r0, [r0, #0]
	__asm("LDR R1, [R0]");
 80015e2:	6801      	ldr	r1, [r0, #0]
	__asm("LDMIA R1!, {R4-R11}");
 80015e4:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm("MSR PSP, R1");
 80015e8:	f381 8809 	msr	PSP, r1

	__asm("CPSIE I");
 80015ec:	b662      	cpsie	i
	__asm("BX LR");
 80015ee:	4770      	bx	lr
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000008 	.word	0x20000008
 80015fc:	2000000c 	.word	0x2000000c

08001600 <get_tick>:

uint32_t get_tick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
	return tick;
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <get_tick+0x10>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	2000002c 	.word	0x2000002c

08001614 <systic_delay>:
void systic_delay(uint32_t ms)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uint32_t t = get_tick();
 800161c:	f7ff fff0 	bl	8001600 <get_tick>
 8001620:	60f8      	str	r0, [r7, #12]
	while((get_tick() - t) < ms);
 8001622:	bf00      	nop
 8001624:	f7ff ffec 	bl	8001600 <get_tick>
 8001628:	4602      	mov	r2, r0
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d8f7      	bhi.n	8001624 <systic_delay+0x10>
	return;
 8001634:	bf00      	nop
}
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <MemManage_Handler>:
}



void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	while(1);
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler+0x4>

08001642 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
	while(1);
 8001646:	e7fe      	b.n	8001646 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
	while(1);
 800164c:	e7fe      	b.n	800164c <UsageFault_Handler+0x4>
	...

08001650 <__libc_init_array>:
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	2600      	movs	r6, #0
 8001654:	4d0c      	ldr	r5, [pc, #48]	; (8001688 <__libc_init_array+0x38>)
 8001656:	4c0d      	ldr	r4, [pc, #52]	; (800168c <__libc_init_array+0x3c>)
 8001658:	1b64      	subs	r4, r4, r5
 800165a:	10a4      	asrs	r4, r4, #2
 800165c:	42a6      	cmp	r6, r4
 800165e:	d109      	bne.n	8001674 <__libc_init_array+0x24>
 8001660:	f000 f81a 	bl	8001698 <_init>
 8001664:	2600      	movs	r6, #0
 8001666:	4d0a      	ldr	r5, [pc, #40]	; (8001690 <__libc_init_array+0x40>)
 8001668:	4c0a      	ldr	r4, [pc, #40]	; (8001694 <__libc_init_array+0x44>)
 800166a:	1b64      	subs	r4, r4, r5
 800166c:	10a4      	asrs	r4, r4, #2
 800166e:	42a6      	cmp	r6, r4
 8001670:	d105      	bne.n	800167e <__libc_init_array+0x2e>
 8001672:	bd70      	pop	{r4, r5, r6, pc}
 8001674:	f855 3b04 	ldr.w	r3, [r5], #4
 8001678:	4798      	blx	r3
 800167a:	3601      	adds	r6, #1
 800167c:	e7ee      	b.n	800165c <__libc_init_array+0xc>
 800167e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001682:	4798      	blx	r3
 8001684:	3601      	adds	r6, #1
 8001686:	e7f2      	b.n	800166e <__libc_init_array+0x1e>
 8001688:	080016b0 	.word	0x080016b0
 800168c:	080016b0 	.word	0x080016b0
 8001690:	080016b0 	.word	0x080016b0
 8001694:	080016b4 	.word	0x080016b4

08001698 <_init>:
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	bf00      	nop
 800169c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800169e:	bc08      	pop	{r3}
 80016a0:	469e      	mov	lr, r3
 80016a2:	4770      	bx	lr

080016a4 <_fini>:
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	bf00      	nop
 80016a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016aa:	bc08      	pop	{r3}
 80016ac:	469e      	mov	lr, r3
 80016ae:	4770      	bx	lr
